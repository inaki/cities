<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>CfA Cities 2015</title>
 <link href="http://waitforit.com/atom.xml" rel="self"/>
 <link href="http://waitforit.com/"/>
 <updated>2014-10-21T21:49:27-04:00</updated>
 <id>http://waitforit.com</id>
 <author>
   <name>Fellows 2015</name>
   <email></email>
 </author>

 
 <entry>
   <title>West Sacramento</title>
   <link href="http://waitforit.com/post/west-sacramento"/>
   <updated>2014-11-04T00:00:00-04:00</updated>
   <id>http://waitforit.com/post/west-sacramento</id>
   <content type="html">&lt;p&gt;Recently I was looking for a designer to collaborate with on a project
called &lt;a href=&quot;/post/codearmory&quot;&gt;Code Armory&lt;/a&gt;. I started looking for online resources to meet some
talented designers. I discovered a site called
&lt;a href=&quot;http://collabfinder.com&quot;&gt;CollabFinder&lt;/a&gt; and immediately realized I had
discovered something of extraordinary value.&lt;/p&gt;

&lt;p&gt;CollabFinder allows you to search for designers, developers, artists,
writers, and scientists by physical location, skills, and interests. You
can pitch them a project you&amp;#39;d like to &amp;quot;collaborate&amp;quot; on (collaboration
in this context, means non-monetary help).&lt;/p&gt;

&lt;p&gt;So I started looking for designers in the San Francisco area, found some
really talented people, sent them a note about the project I needed help
on, and within an hour I had my replies. I quickly started emailing back
and forth with a designer named &lt;a href=&quot;http://twitter.com/lainlee3design&quot;&gt;Lain Lee&lt;/a&gt;.
He told me he needed some help coding his new design site, and asked if
I&amp;#39;d be interested in trading services. We actually met at Starbucks down
the road from my office that same day, and started talking about our ideas
and life in general. We just clicked. Our interests and passions line up so well.
It&amp;#39;s been a great partnership. Today, I&amp;#39;m happy to say we launched
Lain&amp;#39;s &lt;a href=&quot;http://lainlee3design.com&quot;&gt;new site&lt;/a&gt;.
The site was put together with KirbyCMS, a few jQuery plugins, and
some good ol&amp;#39; fashioned elbow grease.&lt;/p&gt;

&lt;p&gt;Quick word about Lain as a designer/illustrator: this guy is one heck of
an artist. Since we&amp;#39;ve started working together I&amp;#39;ve started to follow
his work, and honestly, every thing the guy
creates is pure gold. Check out this
&lt;a href=&quot;http://lainlee3design.com/blog/avengers-assemble-timelapse&quot;&gt;timelapse&lt;/a&gt; of his mad
illustration skills! The stuff he&amp;#39;s designed for Code Armory is
absolutely perfect. Excellent illustration, web design, and it totally
lines up with my vision for this new project. I&amp;#39;ll be sure to write more
as I move further along with it.&lt;/p&gt;

&lt;p&gt;Make sure you head over and check out his new site
(http://lainlee3design.com). Check out his
portfolio and see what you think. I&amp;#39;d highly recommend him for any of your
design needs.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Albuquerque</title>
   <link href="http://waitforit.com/post/Albuquerque"/>
   <updated>2014-10-21T00:00:00-04:00</updated>
   <id>http://waitforit.com/post/Albuquerque</id>
   <content type="html">&lt;p&gt;For my first post, I&amp;#39;d like to talk a little about patterns.&lt;/p&gt;

&lt;p&gt;Most programmers are puzzle solvers. We sit and tinker all day trying to solve interesting
problems, or most often, solving problems we&amp;#39;ve created ourselves. The most rewarding part of this puzzle solving,
is when a pattern is identified, and an association is made. Simplifying these patterns into reusable pieces of code
is what makes programming fun. I know I&amp;#39;m most proud of code that I&amp;#39;ve written that is highly reusable.&lt;/p&gt;

&lt;p&gt;What typically happens is that programmers will put off writing truly reusable code until absolutely necessary. I do,
and so does everyone else. I&amp;#39;ve outlined a little bit of what typical puzzle solving looks like (at least for me):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Button Mashing

&lt;ul&gt;
&lt;li&gt;I start prototyping a solution to a problem&lt;/li&gt;
&lt;li&gt;I throw good coding practices out the window and just try to get results on the screen&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Refactoring

&lt;ul&gt;
&lt;li&gt;I spend hours and hours tweaking code to be more readable/efficient/reusable&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Epiphany

&lt;ul&gt;
&lt;li&gt;I realize some subset of my new code is similar to something I&amp;#39;ve written before&lt;/li&gt;
&lt;li&gt;I create some small utility/API that is tailor-made for a certain coding pattern&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Quickly, I&amp;#39;ll say that the big time-suck in Step 2 can be reduced if better code is written from the start.
Understandably, outside factors can make this impractical (e.g. time constraints, rapid prototyping, etc).
I&amp;#39;d still recommend finding the balance between an accurate, fast prototype, and a clean implementation as much as possible.&lt;/p&gt;

&lt;p&gt;Now, where does the pattern come in? What I&amp;#39;d really like to focus on is Step 3. This Epiphany is usually what spawns excellent
libaries/widgets/gems/APIs.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s walk through a more concrete example.&lt;/p&gt;

&lt;p&gt;Recently, I was messing around with Ruby on Rails and I had started added some client-side/server-side communication
via AJAX. I&amp;#39;ll take you through a smaller, similar app and see if you can spot the pattern.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s design a Grocery List application. The user can create Lists which contain multiple Items.
We&amp;#39;ll have a unalterable, finite set of possible items the user might want on a list.
If we wanted to create a page where the list can be built out on the client-side and then pushed to the server to save the list,
we&amp;#39;d need a way of querying for items, as well as some button to submit the completed list.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s some code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Submit this form with the name of the item to get back data from server --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;get-items&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/items&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;get&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-remote=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;items[name]&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;table&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;grocery-list&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;1.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&lt;/span&gt;First Item&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Add new row here with the new item --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And some more:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// JS to grab data passed back from server and append row to the table&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;#get-items&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ajax:success&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responseText&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;listData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//listData = global array of Items&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;#grocery-list tbody&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;itemCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;.&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And some more:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// User clicks the save-list button and gets back&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// a confirmation message from the server&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;button#save-list&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/lists&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;listData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;dataType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;json&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;body&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;div class=&amp;quot;confirmation-message&amp;quot;&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;confirm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;/div&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice the pattern? It&amp;#39;s actually something that is quite common in web apps. When submitting data/requests via AJAX,
there is always some sort of follow-up action performed on the client side, typically appending some new set of markup
somewhere to display response data.&lt;/p&gt;

&lt;p&gt;So I decided to create a generic way to respond to these AJAX calls. By leveraging a templating tool like
&lt;a href=&quot;http://mustache.github.com/&quot;&gt;mustache.js&lt;/a&gt;, or
&lt;a href=&quot;http://underscorejs.org/#template&quot;&gt;underscore&lt;/a&gt;, it was easy to write a utility to listen
for AJAX responses, and append a template, populated with the response data.
I found this tool incredibly useful, and I&amp;#39;m still working on making it
more universal to the task. It&amp;#39;s called AjaxAppend and you can read more
about it &lt;a href=&quot;/projects/ajaxappend&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You see that with a simple example like one above, pointing out these patterns in your mind can save you, and potentially others,
a lot of time in the long run (provided you take the time to do something about it).
Now when I need this type of AJAX/JSON/Markup workflow in an app, I write a few lines of JS, and I&amp;#39;m done.&lt;/p&gt;

&lt;p&gt;So there it is.&lt;/p&gt;

&lt;p&gt;Bad Code -&amp;gt; Pattern -&amp;gt; Simplify Problem -&amp;gt; Widget/Plugin/Function/API/etc&lt;/p&gt;

&lt;p&gt;What I&amp;#39;ve outlined here, is a workflow for putting together reusable utilities. While it may seem slow and imperfect,
the truth is there aren&amp;#39;t a lot of other options. Most programmers don&amp;#39;t have the gift of foresight, so for now, this retroactive
simplification of repetitive code will have to do. Make sure you keep your eyes peeled for patterns that can be taken advantage of,
and tweet/message me some patterns you&amp;#39;ve identified and what you did about it.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Vallejo</title>
   <link href="http://waitforit.com/post/Vallejo"/>
   <updated>2013-02-28T00:00:00-04:00</updated>
   <id>http://waitforit.com/post/Vallejo</id>
   <content type="html">&lt;p&gt;
Introducing the coolest way to stay in sync with Basecamp. That&#39;s right. It&#39;s a node.js script that will send you updates via Mountain Lion&#39;s Notification Center whenever something&#39;s going down at HQ.
&lt;/p&gt;

&lt;p&gt;
Check out Walkie&#39;s project page for more info: &lt;a href=&quot;http://walkie.tybenz.com&quot;&gt;http://walkie.tybenz.com&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;div data-picture data-alt=&quot;walkie&quot;&gt;
      &lt;div data-src=&quot;/img/walkie/small.png&quot;&gt;&lt;/div&gt;
      &lt;div data-src=&quot;/img/walkie/big.png&quot; data-media=&quot;(min-width: 412px)&quot;&gt;&lt;/div&gt;
      &lt;noscript&gt;&lt;img src=&quot;/img/walkie/big.png&quot; alt=&quot;walkie&quot;&gt;&lt;/noscript&gt;
  &lt;/div&gt;
&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Somerville</title>
   <link href="http://waitforit.com/post/Somerville"/>
   <updated>2013-02-07T00:00:00-04:00</updated>
   <id>http://waitforit.com/post/Somerville</id>
   <content type="html">&lt;p&gt;A couple months ago I got curious about URL shorteners and how they were
implemented. As I was researching the subject, I realized it might be
fun to write my own. So, of course, the next logical step was to steal
someone else&amp;#39;s script and modify it for my needs. (I&amp;#39;ve lost the link to
that actual script I used for my inspiration but it was similar to
&lt;a href=&quot;https://gist.github.com/zumbojo/1073996&quot;&gt;this&lt;/a&gt; one.)&lt;/p&gt;

&lt;p&gt;I wanted my URL Shortener to meet a few criteria:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Bash: I wanted to call the script from the command line, have it
register the redirect on the server and put the shortened URL in my
clipboard&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub Pages: I wanted the server with the redirects to be hosted for
free. That naturally brought me to GitHub.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Awesomeness: I wanted my shortened URLs to live on an awesome domain.
What&amp;#39;s more awesome than the word itself right?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So I registered the domain awes0.me, ported the script over to BASH.
And deployed to Github.&lt;/p&gt;

&lt;p&gt;The resulting script keeps a running count of how many URLs have been
generated, generates a hash on that value, creates a directory with that
hash as its name and injects a simple JavaScript redirect into an
index.html document inside that directory, and pushes the GitHub Repo.
Deploying a URL that looks something like: &lt;a href=&quot;http://awes0.me/K6g&quot;&gt;http://awes0.me/K6g&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And that&amp;#39;s it. I can now shorten URLs to my heart&amp;#39;s content. No PHP, no
paid hosting, no headaches. You can view the source &lt;a href=&quot;https://gist.github.com/4735033&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Pittsburgh</title>
   <link href="http://waitforit.com/post/pittsburgh"/>
   <updated>2013-02-06T00:00:00-04:00</updated>
   <id>http://waitforit.com/post/pittsburgh</id>
   <content type="html">&lt;p&gt;I thought I&amp;#39;d write a quick post about what I used to create this blog.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;: Static site generator&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sass-lang.com&quot;&gt;Sass&lt;/a&gt;: CSS preprocessor&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bourbon.io&quot;&gt;Bourbon&lt;/a&gt;: Set of generic Sass mixins&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://neat.bourbon.io&quot;&gt;Neat&lt;/a&gt;: Set of grid-based Sass mixins (dependent on Bourbon)&lt;/li&gt;
&lt;li&gt;Fonts: &lt;a href=&quot;http://www.fontsquirrel.com/fonts/bebas-neue&quot;&gt;Bebas Neue&lt;/a&gt;, &lt;a href=&quot;https://github.com/adobe/source-sans-pro&quot;&gt;Adobe Source Sans Pro&lt;/a&gt;, &lt;a href=&quot;https://github.com/adobe/source-code-pro&quot;&gt;Adobe Source Code Pro&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you&amp;#39;re not using Github Pages and Jekyll yet, get cracking. There is
nothing I love more than to write a post in markdown, deploy it with
git, and have the whole thing hosted for free!&lt;/p&gt;

&lt;p&gt;Sass just makes life better. There are far too many vendor prefixes to
deal with these days. And Sass makes styling quick and painless.&lt;/p&gt;

&lt;p&gt;Bourbon and Neat are my new favorite mixin library. The guys at
Thoughtbot are always doing some great things, but this small, intuitive
mixin and grid system just works.&lt;/p&gt;

&lt;p&gt;The Adobe fonts have become my new favorite defaults. Bebas is just a
great headings fault, similar to din. I&amp;#39;m in love.&lt;/p&gt;

&lt;p&gt;Well that about wraps it up. The list is pretty short and I&amp;#39;m extremely
happy with the results. Thanks for reading.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Miami Dade</title>
   <link href="http://waitforit.com/post/miami-dade"/>
   <updated>2012-09-18T00:00:00-04:00</updated>
   <id>http://waitforit.com/post/miami-dade</id>
   <content type="html">&lt;p&gt;I&amp;#39;ve been using Gists a lot recently to pass code back and forth between
myself and my co-workers, and I&amp;#39;m starting to realize more and more how
valuable good code snippets can be. I find myself perusing Github all
the time to see what other people are working on and half the time I
stumble upon some small, reusable piece of code that I force myself to
grab and dump into my own little directory of code snippets.&lt;/p&gt;

&lt;p&gt;The more and more I collect, the more I realize the process of finding
good code snippets on the web is pretty terrible. I often just hit
google and wind up on stack overflow, having to sift through a bunch of
people&amp;#39;s ramblings and log files and whatnot. Why isn&amp;#39;t there a better
place to search for these small bits of wonder-code?&lt;/p&gt;

&lt;p&gt;I set out to see if it already existed, and it turns out that it
doesn&amp;#39;t. So I plan on creating one.&lt;/p&gt;

&lt;h3&gt;Side Story&lt;/h3&gt;

&lt;p&gt;My sister-in-law went into labor last week so my wife and I
went down to Lemoore Naval Air Station to see the baby. As I was driving
off the base I saw a sign indicating which way to turn to get to the
Armory. That&amp;#39;s when it hit me. This code snippet site need not only
focus on code snippets. I want to make it a place where developers get
equipped in every way they need.&lt;/p&gt;

&lt;h3&gt;The Plan&lt;/h3&gt;

&lt;p&gt;Offer the soldiers (developers) a chance to stock up on weapons
(snippets), load up on ammo (frameworks/libraries), engage in training
(walkthroughs) and choose their
barracks (development environments). The latter will most likely allow
for users to peruse various &lt;a href=&quot;http://vagrantup.com&quot;&gt;vagrant&lt;/a&gt; boxes and
associated chef recipes (if you don&amp;#39;t know about vagrant, get it).&lt;/p&gt;

&lt;h3&gt;Implementation&lt;/h3&gt;

&lt;p&gt;Like I said I love Gists. Rather than re-inventing the wheel
this new project is simply going to
leverage gists. I&amp;#39;ll add some meta-data to various gists to create a place
where code snippets can be searched and saved more easily.&lt;/p&gt;

&lt;p&gt;Why hasn&amp;#39;t Github added this to Gist already? My bet is they&amp;#39;ve been
busy. You know, redefining how everyone codes? They might
get around to improving Gist, but for now, I&amp;#39;m taking it upon myself.
Who&amp;#39;s with me?&lt;/p&gt;

&lt;h3&gt;I Need Help&lt;/h3&gt;

&lt;p&gt;I don&amp;#39;t know about you, but this sounds like a dream to me. But I&amp;#39;m
going to need help in getting some solid content onto this site. If you
can help spread the word, or send me some code snippets you&amp;#39;ve found to
be invaluable, it would go a long way toward getting this project off
the ground.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Indianapolis</title>
   <link href="http://waitforit.com/post/Indianapolis"/>
   <updated>2012-07-24T00:00:00-04:00</updated>
   <id>http://waitforit.com/post/Indianapolis</id>
   <content type="html">&lt;p&gt;Working on ThemeRoller was a lot of fun and it taught me a lot about client-side styling and user interfaces in general.
It has also stood out in my mind as I continue to interact with more and more CSS frameworks, and I keep longing for more
tools like ThemeRoller.&lt;/p&gt;

&lt;p&gt;Somewhere along the line with ThemeRoller, someone asked me, &amp;quot;Why is this tool specific to one framework?
Couldn&amp;#39;t you create a tool that would work with any CSS file?&amp;quot;. My immediate reaction was that this
person clearly didn&amp;#39;t understand the complexity of the problem (turns out, it&amp;#39;s not that complex at all).&lt;/p&gt;

&lt;p&gt;But the thing is, even after wrapping up my involvement with jQuery Mobile, that person&amp;#39;s question was still echoing in
the back of my mind. Would it be that hard to develop some framework-agnostic, WYSIWYG theme creation tool?&lt;/p&gt;

&lt;p&gt;My immediate thought was to improve upon current developer tools. We all know Firebug and Chrome&amp;#39;s developer tools work
just fine for debugging and quick styling, but I think the app I have in mind would do more for non-developers
beginning to dabble in some frameworks like jQuery Mobile or Twitter Bootstrap.&lt;/p&gt;

&lt;p&gt;I could potentially put a little time and effort into forking/extending a tool like Firebug and adding some nice color
pickers and number spinners, but at the end of the day it wouldn&amp;#39;t reach as many people or be all that usable.&lt;/p&gt;

&lt;p&gt;So here&amp;#39;s my thought. I want to create an extensible and configurable theming application that any developer can
grab, tweak, and apply for his specific framework. This way, each framework could potentially have it&amp;#39;s own
customized version of the tool, but at the end of the day the basic ingredients are all the same.&lt;/p&gt;

&lt;p&gt;What are those ingredients? Glad you asked:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fast, light-weight parsing of any CSS file&lt;/li&gt;
&lt;li&gt;UI elements specialized towards various CSS rules&lt;/li&gt;
&lt;li&gt;Colorpicker&lt;/li&gt;
&lt;li&gt;An inspector tool for point and click edits&lt;/li&gt;
&lt;li&gt;Draggable colors with customizable behaviors&lt;/li&gt;
&lt;li&gt;Undo/Redo Logs of every action the user makes&lt;/li&gt;
&lt;li&gt;Downloadable/Shareable themes&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As far as parsing goes, for now I&amp;#39;m thinking that the API will mostly handle the business logic of the actual skinning.
But the rules that a user has access to will need to be specified by the developer. This can be done with some esoteric CSS
comment for every rule that needs to be represented in the UI. Or, more likely, some specific JSON that the developer could write
out quickly that would list which rules are editable, and how they are grouped.&lt;/p&gt;

&lt;p&gt;The potential for this app extends beyond just the big-name frameworks. The tool could also be used when designing a site
for a client. I&amp;#39;ll give you a scenario. You whip up a site design, and your client is unhappy with your choice of typeface,
color, spacing, etc, but he likes the overall layout. Why bother iterating on color choices? Design a solid layout, and then let
the clients skin the page themselves. All you do is provide a base theme that can be easily tweaked. Sounds nice right?&lt;/p&gt;

&lt;p&gt;Ok, so there&amp;#39;s the overall outline. I&amp;#39;d love to get some feedback on the idea, as well as any questions/suggestions you
might have about implementing this thing. Give me a shout-out on
&lt;a href=&quot;http://twitter.com/tybenz&quot;&gt;Twitter&lt;/a&gt;,
&lt;a href=&quot;mailto:tabenziger@gmail.com&quot;&gt;email&lt;/a&gt; me or submit a ticket on the &lt;a href=&quot;https://github.com/themebot/themebot&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note: This project is nothing more than a thought for now, so no, there&amp;#39;s no source code to look at. Check back later for
updates. It will be soon.&lt;/p&gt;
</content>
 </entry>
 

</feed>
